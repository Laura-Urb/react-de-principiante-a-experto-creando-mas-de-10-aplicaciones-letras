{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Letra.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusquedaCompleta","useState","artista","cancion","busqueda","setBusqueda","error","setError","updateBusqueda","e","target","name","value","onSubmit","preventDefault","trim","type","placeholder","onChange","Letra","letra","length","Info","info","Object","keys","strArtistThumb","strGenre","strBiographyES","src","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","busquedaCompleta","setLetra","setInfo","useEffect","url","url2","a","Promise","all","Axios","get","informacion","data","lyrics","artists","consultarAPILetra","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5864e45f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Error = ({ mensaje }) => {\r\n  return <p className=\"alert alert-danger text-center p-2\">{mensaje}</p>;\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState } from \"react\";\r\nimport Error from \"./Error\";\r\n\r\nconst Formulario = ({setBusquedaCompleta}) => {\r\n  const [busqueda, setBusqueda] = useState({\r\n    artista: \"\",\r\n    cancion: \"\",\r\n  });\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const { artista, cancion } = busqueda;\r\n\r\n  const updateBusqueda = (e) => {\r\n    setBusqueda({ ...busqueda, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const saveBusqueda = (e) => {\r\n    e.preventDefault();\r\n    if (cancion.trim() === \"\" || artista.trim() === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n\r\n    setBusquedaCompleta(busqueda);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-info\">\r\n      {error ? (\r\n        <Error mensaje=\"todos los campos son obligatorios\"></Error>\r\n      ) : null}\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <form\r\n            className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n            onSubmit={saveBusqueda}\r\n          >\r\n            <fieldset>\r\n              <legend className=\"text-center\">Buscador Letras Canciones</legend>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label>Artista</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"artista\"\r\n                      placeholder=\"Nombre Artista\"\r\n                      value={artista}\r\n                      onChange={updateBusqueda}\r\n                    ></input>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label>Canción</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"cancion\"\r\n                      placeholder=\"Nombre Canción\"\r\n                      value={cancion}\r\n                      onChange={updateBusqueda}\r\n                    ></input>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-primary float-right\">\r\n                Buscar\r\n              </button>\r\n            </fieldset>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React, {Fragment} from \"react\";\r\n\r\nconst Letra = ({ letra }) => {\r\n  if (letra.length === 0) return null;\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Letra Canción</h2>\r\n      <p className=\"letra\">{letra}</p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Letra;\r\n","import React from 'react';\r\n\r\nconst Info = ({info}) => {\r\n\r\n    if(Object.keys(info).length === 0 ) return null;\r\n\r\n    const { strArtistThumb, strGenre, strBiographyES } = info;\r\n    \r\n    return ( \r\n        <div className=\"card border-light\">\r\n            <div className=\"card-header bg-primary text-light font-weight-bold\">\r\n                Información Artista\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <img src={strArtistThumb} alt=\"Logo Artista\" />\r\n                <p className=\"card-text\">Género: {strGenre}</p>\r\n                <h2 className=\"card-text\">Biografía:</h2>\r\n                <p className=\"card-text\">{strBiographyES}</p>\r\n                <p className=\"card-text\">\r\n                    <a href={`https://${info.strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <i className=\"fab fa-facebook\"></i>\r\n                    </a>\r\n                    <a href={`https://${info.strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <i className=\"fab fa-twitter\"></i>\r\n                    </a>\r\n                    <a href={`${info.strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <i className=\"fab fa-lastfm\"></i>\r\n                    </a>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Info;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Axios from \"axios\";\nimport Letra from \"./components/Letra\";\nimport Info from \"./components/Info\";\n\nfunction App() {\n  const [busquedaCompleta, setBusquedaCompleta] = useState({\n    artista: \"\",\n    cancion: \"\",\n  });\n\n  const [letra, setLetra] = useState(\"\");\n\n  const [info, setInfo] = useState({});\n\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(busquedaCompleta).length === 0) return;\n\n    const { artista, cancion } = busquedaCompleta;\n\n    const url = `https://api.lyrics.ovh/v1/${artista}/${cancion}`;\n    const url2 = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artista}`;\n\n    const consultarAPILetra = async () => {\n      // const respuesta = await fetch(url);\n      // const resultado = await respuesta.json();\n\n      // const resultado = await Axios.get(url);\n      // setLetra(resultado.data.lyrics);\n\n      const [letra, informacion] = await Promise.all([\n        Axios.get(url),\n        Axios.get(url2)\n      ]);\n\n      setLetra(letra.data.lyrics);\n      setInfo(informacion.data.artists[0]);\n    };\n\n    consultarAPILetra();\n  }, [busquedaCompleta, info]);\n\n  return (\n    <Fragment>\n      <Formulario setBusquedaCompleta={setBusquedaCompleta}></Formulario>\n\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Letra letra={letra}></Letra>\n          </div>\n          <div className=\"col-md-6\">\n            <Info info={info}></Info>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}